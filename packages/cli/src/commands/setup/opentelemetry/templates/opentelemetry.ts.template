const { diag, DiagConsoleLogger, DiagLogLevel } = require('@opentelemetry/api')
const { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http')
const { registerInstrumentations } = require('@opentelemetry/instrumentation')
const { Resource } = require('@opentelemetry/resources')
const {
  NodeTracerProvider,
  BatchSpanProcessor,
} = require('@opentelemetry/sdk-trace-node')
const {
  SemanticResourceAttributes,
} = require('@opentelemetry/semantic-conventions')

// You may wish to set this to DiagLogLevel.DEBUG when you need to debug opentelemetry itself
diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.INFO)

// Optionally register instrumentation libraries here
registerInstrumentations({
  instrumentations: [],
})

const resource = Resource.default().merge(
  new Resource({
    [SemanticResourceAttributes.SERVICE_NAME]: 'redwood-app',
    [SemanticResourceAttributes.SERVICE_VERSION]: '0.0.0',
  })
)

const exporter = new OTLPTraceExporter({
  // Update this URL to point to where your OTLP compatible collector is listening
  url: 'http://127.0.0.1:4318/v1/traces',
})

// You may wish to switch to SimpleSpanProcessor if you wish to ensure spans are processed immediately
const processor = new BatchSpanProcessor(exporter)

const provider = new NodeTracerProvider({
  resource: resource,
})
provider.addSpanProcessor(processor)

provider.register()
